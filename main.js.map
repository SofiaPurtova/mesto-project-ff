{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/cards.js","webpack://mesto-project-ff/./src/components/validate.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/index.js"],"sourcesContent":["export const initialCards = [\r\n    {\r\n      name: \"Архыз\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\r\n    },\r\n    {\r\n      name: \"Челябинская область\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\r\n    },\r\n    {\r\n      name: \"Иваново\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\r\n    },\r\n    {\r\n      name: \"Камчатка\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\r\n    },\r\n    {\r\n      name: \"Холмогорский район\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\r\n    },\r\n    {\r\n      name: \"Байкал\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\r\n    }\r\n];\r\n","const showError = (formElement, inputElement, errorMessage, cfg) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n    inputElement.classList.add(cfg.inputErrorClass);\r\n    errorElement.textContent = errorMessage;\r\n    errorElement.classList.add(cfg.errorClass);\r\n}\r\n\r\nconst hideError = (formElement, inputElement, cfg) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n    inputElement.classList.remove(cfg.inputErrorClass);\r\n    errorElement.textContent = \" \";\r\n    errorElement.classList.remove(cfg.errorClass);\r\n    inputElement.setCustomValidity(\"\");\r\n}\r\n\r\nconst isValid = (formElement, inputElement, cfg) => {\r\n    if (inputElement.validity.patternMismatch) {\r\n        inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n    } else {\r\n        inputElement.setCustomValidity(\"\");\r\n    }\r\n    console.log(inputElement.validationMessage);\r\n    if (!inputElement.validity.valid) {\r\n        showError(formElement, inputElement, inputElement.validationMessage, cfg);\r\n    } else {\r\n        hideError(formElement, inputElement, cfg);\r\n    }\r\n}\r\n\r\nconst checkInputValidity = (formElement, inputElement, cfg) => {\r\n    isValid(formElement, inputElement, cfg);\r\n}\r\n\r\nfunction setEventListeners (formElement, cfg) {\r\n    const inputList = Array.from(formElement.querySelectorAll(cfg.inputSelector));\r\n    const buttonElement = formElement.querySelector(cfg.submitButtonSelector);\r\n    // чтобы проверить состояние кнопки в самом начале\r\n    toggleButtonState(inputList, buttonElement,  cfg);\r\n    inputList.forEach((inputElement) => {\r\n      inputElement.addEventListener('input', function () {\r\n        checkInputValidity(formElement, inputElement, cfg);\r\n        // чтобы проверять его при изменении любого из полей\r\n        toggleButtonState(inputList, buttonElement, cfg);\r\n      });\r\n    });\r\n}\r\n\r\nexport const enableValidation = (cfg) => {\r\n    const formList = Array.from(document.querySelectorAll(cfg.formSelector));\r\n    formList.forEach((formElement) => {\r\n      formElement.addEventListener('submit', (evt) => {\r\n        evt.preventDefault();\r\n      });\r\n        const fieldsetList = Array.from(formElement.querySelectorAll('.form__set'));\r\n        fieldsetList.forEach((fieldSet) => {\r\n            setEventListeners(fieldSet, cfg);\r\n        });\r\n    });\r\n}\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n    return inputList.some((inputElement) => {\r\n      return !inputElement.validity.valid;\r\n    })\r\n}\r\n\r\nfunction toggleButtonState(inputList, buttonElement, cfg) {\r\n    if (hasInvalidInput(inputList)) {\r\n    buttonElement.classList.add(cfg.inactiveButtonClass);\r\n    buttonElement.setAttribute('disabled', '');\r\n  } else {\r\n    buttonElement.classList.remove(cfg.inactiveButtonClass);\r\n    buttonElement.removeAttribute('disabled', '');\r\n  } \r\n}\r\n\r\nexport const clearValidation = (formElement, cfg) => {\r\n    const inputList = Array.from(formElement.querySelectorAll(cfg.inputSelector));\r\n    const buttonElement = formElement.querySelector(cfg.submitButtonSelector);\r\n    \r\n    inputList.forEach((inputElement) => {\r\n        hideError(formElement, inputElement, cfg);\r\n    });\r\n\r\n    toggleButtonState(inputList, buttonElement, cfg);\r\n}","const config = {\r\n    baseUrl: 'https://nomoreparties.co/v1/wff-cohort-29',\r\n    headers: {\r\n      authorization: 'f9e240a7-ecbe-4c3b-ad2a-e207beb70d7e',\r\n      'Content-Type': 'application/json'\r\n    }\r\n  }\r\n\r\nfunction checkResponse(res) {\r\n    if (res.ok) {\r\n        return res.json();\r\n    }\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n}\r\n\r\nexport const getProfileInfo  = () => {\r\n    return fetch(`${config.baseUrl}/users/me`, {\r\n        method: \"GET\",\r\n        headers: {\r\n            authorization: config.headers.authorization,\r\n        },\r\n    })\r\n        .then(checkResponse);\r\n};\r\n\r\nexport const getInitialCards = () => {\r\n    return fetch(`${config.baseUrl}/cards`, {\r\n        method: \"GET\",\r\n        headers: config.headers\r\n    })\r\n        .then(checkResponse)\r\n}\r\n\r\nexport const patchProfileInfo = (name, about) => {\r\n    return fetch(`${config.baseUrl}/users/me`, {\r\n        method: \"PATCH\",\r\n        headers: config.headers,\r\n        body: JSON.stringify({\r\n            name: name,\r\n            about: about\r\n        })\r\n    })\r\n    .then(checkResponse);\r\n}\r\n\r\nexport const postCard = (name, link) => {\r\n    return fetch(`${config.baseUrl}/cards`, {\r\n        method: \"POST\",\r\n        headers: config.headers,\r\n        body: JSON.stringify({\r\n            name: name,\r\n            link: link\r\n        })\r\n    })\r\n    .then(checkResponse);\r\n}\r\n\r\nexport const deleteCard = (id) => {\r\n    return fetch(`${config.baseUrl}/cards/${id}`, {\r\n        method: 'DELETE',\r\n        headers: config.headers\r\n    })\r\n        .then(checkResponse)\r\n}\r\n\r\nexport const putLike = (id) => {\r\n    return fetch(`${config.baseUrl}/cards/likes/${id}`, {\r\n        method: 'PUT',\r\n        headers: config.headers\r\n    })\r\n        .then(checkResponse)\r\n}\r\n\r\nexport const deleteLike = (id) => {\r\n    return fetch(`${config.baseUrl}/cards/likes/${id}`, {\r\n        method: 'DELETE',\r\n        headers: config.headers\r\n    })\r\n        .then(checkResponse)\r\n}\r\n\r\nexport const patchAvatar = (link) => {\r\n    return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n        method: \"PATCH\",\r\n        headers: config.headers,\r\n        body: JSON.stringify({\r\n           avatar: link\r\n        })\r\n    })\r\n        .then(checkResponse)\r\n}\r\n","import { deleteCard, putLike, deleteLike } from './api.js';\r\n\r\nconst likeCount = (cardLikeCount, likes) => {\r\n  cardLikeCount.textContent = likes.length\r\n}\r\n\r\nconst cardTemplate = document.querySelector('#card-template').content; \r\n\r\n// Функция для создания карточки \r\nexport function createCard(cardData, userInfo, onCardDelete, onCardLike, onLargeImage) { \r\n  const cardElement = cardTemplate.querySelector('.card').cloneNode(true);                                           // Клонируем шаблон карточки \r\n\r\n  // Устанавливаем значения имени и ссылки на изображение \r\n  const cardImage = cardElement.querySelector('.card__image'); \r\n  const cardTitle = cardElement.querySelector('.card__title'); \r\n  const deleteButton = cardElement.querySelector('.card__delete-button');\r\n  const likeButton = cardElement.querySelector('.card__like-button');\r\n  const cardLikeCount = cardElement.querySelector('.button-like-count');\r\n\r\n  cardImage.src = cardData.link;                                                       // Устанавливаем источник изображения \r\n  cardImage.alt = cardData.name;                                                      // Устанавливаем альт-текст \r\n  cardTitle.textContent = cardData.name;                                             // Устанавливаем название \r\n  cardLikeCount.textContent = cardData.likes.length; // likeCount(cardLikeCount, cardData.likes);\r\n\r\n  // Устанавливаем состояние кнопки лайка\r\n  if (cardData.likes.some(like => like._id === userInfo._id)) {\r\n    likeButton.classList.add('card__like-button_is-active'); // Если пользователь уже лайкнул, добавляем класс\r\n  }\r\n\r\n  // Добавляем обработчик клика для удаления карточки \r\n  //deleteButton.addEventListener('click', handleCardDelete);\r\n  if (cardData.owner._id === userInfo._id) {\r\n    deleteButton.style.display = 'block';\r\n    deleteButton.addEventListener('click', (event) => { \r\n      onCardDelete(event, cardData._id);\r\n    });\r\n  } else {\r\n    deleteButton.style.display = 'none';\r\n  }                    \r\n  \r\n  // Добавляем обработчик клика для лайка\r\n  likeButton.addEventListener('click', (event) => { \r\n    onCardLike(event, cardData._id, cardData.likes, cardElement);\r\n  });\r\n  \r\n  // Добавляем обработчик клика по изображению\r\n  cardImage.addEventListener('click', () => {\r\n    onLargeImage(cardData.link, cardData.name); // Открываем попап с изображением\r\n  });\r\n  \r\n\r\n  return cardElement; // Возвращаем готовый элемент карточки \r\n}\r\n\r\n// Функция для удаления карточки \r\nexport function handleCardDelete(event, cardId) { \r\n  const cardElement = event.target.closest('.places__item');              // Находим ближайший элемент карточки \r\n  if (cardElement) {\r\n    deleteCard(cardId)\r\n    .then(() => {\r\n      cardElement.remove();\r\n    })\r\n    .catch((err) => {\r\n      console.log(`Ошибка ${err}`);\r\n    });     \r\n  } \r\n}\r\n\r\n// Функция для лайка карточки \r\nexport function handleCardLike(event, cardId, likes, card) {\r\n    const likeButton = event.target; \r\n    const isLiked = likeButton.classList.contains(\"card__like-button_is-active\"); \r\n  \r\n    let request; \r\n    if (!isLiked) {\r\n      request = putLike(cardId);\r\n    } else {\r\n      request = deleteLike(cardId);\r\n    }\r\n  \r\n    request\r\n    .then((updatedCardData) => {\r\n      const cardLikeCount = card.querySelector('.button-like-count');\r\n      cardLikeCount.textContent = updatedCardData.likes.length;\r\n      likes = updatedCardData.likes;\r\n      likeButton.classList.toggle('card__like-button_is-active');\r\n    })\r\n    .catch(err => console.error(err));\r\n}\r\n\r\n ","// Функция для открытия модального окна \r\nexport function openPopup(popup) {\r\n    popup.classList.add('popup_is-opened');\r\n    document.addEventListener('keydown', handleEscapeClose);\r\n}\r\n \r\n// Функция для закрытия модального окна \r\nexport function closePopup(popup) {\r\n    popup.classList.remove('popup_is-opened');\r\n    document.removeEventListener('keydown', handleEscapeClose);  \r\n}\r\n\r\n// Обработчик события клавиши Esc \r\nfunction handleEscapeClose(event) { \r\n    if (event.key === 'Escape') { \r\n        const openedPopup = document.querySelector('.popup_is-opened'); \r\n        if (openedPopup) { \r\n            closePopup(openedPopup); \r\n        } \r\n    } \r\n}","import '../pages/index.css';\r\nimport { initialCards } from './cards.js';\r\nimport { enableValidation, clearValidation } from './validate.js';\r\nimport { createCard, handleCardDelete, handleCardLike } from './card.js';\r\nimport { openPopup, closePopup } from './modal.js';\r\nimport { getProfileInfo, getInitialCards, patchProfileInfo, postCard, patchAvatar } from './api.js';\r\n\r\n// Копируем шаблон карточки \r\nconst placesList = document.querySelector('.places__list'); \r\n \r\n// Вызываем функцию для рендеринга карточек \r\n//renderCards(initialCards); \r\n \r\n// Переменные для модальных окон \r\nconst editPopup = document.querySelector('.popup_type_edit');\r\nconst editAvatarPopup = document.querySelector('.popup_type_edit-avatar');\r\nconst newCardPopup = document.querySelector('.popup_type_new-card'); \r\nconst imagePopup = document.querySelector('.popup_type_image'); \r\nconst closeButtons = document.querySelectorAll('.popup__close');  \r\n\r\nconst titleInput = document.querySelector('.popup__input_type_card-name');\r\nconst imageInput = document.querySelector('.popup__input_type_url'); // =avatarInput\r\n\r\nconst avatarInput = document.querySelector('.popup__input_type_url-avatar');\r\n\r\nconst nameInput = editPopup.querySelector('.popup__input_type_name');\r\nconst descriptionInput = editPopup.querySelector('.popup__input_type_description');\r\n// Получаем значения из профиля\r\nconst profileAvatar = document.querySelector('.profile__image');\r\nconst profileTitle = document.querySelector('.profile__title');  \r\nconst profileDescription = document.querySelector('.profile__description');\r\n\r\n\r\n// Получаем все попапы \r\nconst popups = document.querySelectorAll('.popup'); \r\n\r\n// Добавляем класс 'popup_is-animated' ко всем попапам \r\npopups.forEach(popup => {\r\n    popup.classList.add('popup_is-animated');\r\n});\r\n\r\n// Добавляем обработчик клика по оверлею\r\npopups.forEach((popup) => {\r\n    popup.addEventListener(\"mousedown\", (evt) => {\r\n        if (evt.target.classList.contains(\"popup\")) {\r\n            closePopup(popup);\r\n        }\r\n    });\r\n}); \r\n\r\nconst settings = {\r\n    formSelector: '.popup__form',\r\n    inputSelector: '.popup__input',\r\n    submitButtonSelector: '.popup__button',\r\n    inactiveButtonClass: 'button_inactive',\r\n    inputErrorClass: 'form__input_type_error',   // мой класс\r\n    errorClass: 'form__input-error_active'      // тоже мой класс \r\n};\r\n  \r\nenableValidation(settings);                   // включаю валидацию\r\n\r\nlet userInf = null;\r\n\r\nPromise.all([getProfileInfo(), getInitialCards()])\r\n    .then(([userInfo, cards]) => {\r\n        userInf = userInfo;\r\n        profileTitle.textContent = userInfo.name;\r\n        profileDescription.textContent = userInfo.about;\r\n        profileAvatar.style = `background-image: url('${userInfo.avatar}')`;\r\n        renderCards(cards, userInfo);\r\n    })\r\n    .catch((err) => {\r\n        console.log(`Ошибка ${err}`);\r\n    })\r\n\r\n// Функция для отображения всех карточек \r\nfunction renderCards(cards) {                                                                        // Передаю в функцию массив, который надо вывести \r\n    cards.forEach(card => { \r\n        const cardElement = createCard(card, userInf, handleCardDelete, handleCardLike, openImagePopup);    // Создаем карточку \r\n        placesList.append(cardElement);                                                           // Добавляем карточку в список \r\n    }); \r\n  }\r\n\r\n\r\n// Открытие модального окна редактирования профиля  \r\ndocument.querySelector('.profile__edit-button').addEventListener('click', () => { \r\n    // Заполняем поля ввода значениями из профиля\r\n    nameInput.value = profileTitle.textContent;  \r\n    descriptionInput.value = profileDescription.textContent;  \r\n    clearValidation(editPopup, settings);       // очищаем ошибки валидации формы и делаем кнопку неактивной \r\n    openPopup(editPopup);  \r\n});\r\n\r\n// Находим форму в DOM\r\nconst profileFormElement = editPopup.querySelector('.popup__form');  \r\n\r\n// Обработчик «отправки» формы\r\nfunction handleProfileFormSubmit(evt) {  \r\n    evt.preventDefault(); // Отменяем стандартную отправку формы.\r\n    renderLoading(evt, 'Сохранение...');\r\n    // Получаем значение полей jobInput и nameInput из свойства value\r\n    const newName = nameInput.value;  \r\n    const newJob = descriptionInput.value;\r\n\r\n    // Обновляем информацию о профиле через API\r\n    patchProfileInfo(newName, newJob)\r\n        .then((userInfo) => {\r\n            profileTitle.textContent = userInfo.name;   \r\n            profileDescription.textContent = userInfo.about;   \r\n            closePopup(editPopup); \r\n        })\r\n        .catch((err) => {\r\n            console.log(`Ошибка при обновлении информации о пользователе: ${err.status}`); \r\n        })\r\n        .finally(() => {\r\n            renderLoading(evt, 'Сохранить');\r\n        });\r\n}\r\n\r\n// Прикрепляем обработчик к форме\r\nprofileFormElement.addEventListener('submit', handleProfileFormSubmit);\r\n\r\n// Функция для открытия попапа с изображением \r\nexport function openImagePopup(link, name) {  \r\n    const popupImage = imagePopup.querySelector('.popup__image');  \r\n    const popupCaption = imagePopup.querySelector('.popup__caption');  \r\n \r\n    popupImage.src = link;  \r\n    popupImage.alt = name;  \r\n    popupCaption.textContent = name;  \r\n \r\n    openPopup(imagePopup);  \r\n}\r\n\r\n// Закрытие модальных окон \r\ncloseButtons.forEach(button => { \r\n    button.addEventListener('click', () => { \r\n        const popup = button.closest('.popup'); \r\n        closePopup(popup); \r\n    }); \r\n});\r\n\r\n// Открытие модального окна редактирования аватара профиля\r\nprofileAvatar.addEventListener('click', () => {\r\n    avatarInput.value = getComputedStyle(profileAvatar).backgroundImage.slice(5, -2);\r\n    openPopup(editAvatarPopup);\r\n    clearValidation(editAvatarPopup, settings);\r\n    \r\n});\r\n\r\n// Находим форму добавления аватара в DOM\r\nconst newAvatarElement = editAvatarPopup.querySelector('.popup__form');\r\n\r\n// Обработчик «отправки» формы добавления аватара\r\nfunction handleNewAvatarFormSubmit(evt) {\r\n    evt.preventDefault();\r\n    renderLoading(evt, 'Сохранение...');\r\n\r\n    const newAvatar = avatarInput.value;\r\n    console.log('Новый аватар:', newAvatar);\r\n\r\n    // Обновляем информацию об аватаре через API\r\n    patchAvatar(newAvatar)\r\n    .then((userInfo) => {\r\n        closePopup(editAvatarPopup);\r\n        profileAvatar.style = `background-image: url('${userInfo.avatar}')`;\r\n    })\r\n    .catch((err) => {\r\n        console.log(`Ошибка при обновлении аватара пользователя: ${err.status}`); \r\n    })\r\n    .finally(() => {\r\n        renderLoading(evt, 'Сохранить');\r\n    });\r\n}\r\n// Прикрепляем обработчик к форме\r\nnewAvatarElement.addEventListener('submit',  handleNewAvatarFormSubmit);\r\n\r\n// Открытие модального окна добавления новой карточки \r\ndocument.querySelector('.profile__add-button').addEventListener('click', () => {   \r\n    openPopup(newCardPopup);   \r\n    // Обнуляем поля формы\r\n    titleInput.value = '';\r\n    imageInput.value = '';\r\n    clearValidation(newCardPopup, settings);\r\n});  \r\n\r\n// Находим форму добавления карточки в DOM \r\nconst newCardFormElement = newCardPopup.querySelector('.popup__form'); \r\n\r\n// Обработчик «отправки» формы добавления карточки \r\nfunction handleNewCardFormSubmit(evt) {   \r\n    evt.preventDefault(); // Отменяем стандартную отправку формы. \r\n    renderLoading(evt, 'Создание...');\r\n\r\n    const cardData = {\r\n        name: titleInput.value,\r\n        link: imageInput.value\r\n    };\r\n\r\n    postCard(cardData.name, cardData.link)\r\n        .then((newCard) => {\r\n            closePopup(newCardPopup);\r\n            //renderCards([newCard], userInfo);\r\n            const cardElement = createCard(newCard, userInf, handleCardDelete, handleCardLike, openImagePopup);\r\n            placesList.prepend(cardElement);\r\n            console.log(newCard.link);\r\n        })\r\n        .catch((err) => {\r\n            console.log(`Ошибка при добавлении новой карточки: ${err.status}`); \r\n        })\r\n        .finally(() => {\r\n            renderLoading(evt, 'Создать');\r\n        });\r\n}\r\n\r\n// Прикрепляем обработчик к форме добавления карточки\r\nnewCardFormElement.addEventListener('submit', handleNewCardFormSubmit);\r\n\r\n// Отрисовка состояния загрузки\r\nfunction renderLoading(evt, text) {\r\n    const btn = evt.target.querySelector('.popup__button');\r\n    btn.textContent = text;\r\n  }"],"names":["hideError","formElement","inputElement","cfg","errorElement","querySelector","concat","id","classList","remove","inputErrorClass","textContent","errorClass","setCustomValidity","toggleButtonState","inputList","buttonElement","some","validity","valid","hasInvalidInput","inactiveButtonClass","removeAttribute","add","setAttribute","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","config","baseUrl","headers","authorization","checkResponse","res","ok","json","Promise","reject","status","cardTemplate","document","content","createCard","cardData","userInfo","onCardDelete","onCardLike","onLargeImage","cardElement","cloneNode","cardImage","cardTitle","deleteButton","likeButton","cardLikeCount","src","link","alt","name","likes","length","like","_id","owner","style","display","addEventListener","event","handleCardDelete","cardId","target","closest","fetch","method","then","catch","err","console","log","handleCardLike","card","request","contains","deleteLike","updatedCardData","toggle","error","openPopup","popup","handleEscapeClose","closePopup","removeEventListener","key","openedPopup","placesList","editPopup","editAvatarPopup","newCardPopup","imagePopup","closeButtons","titleInput","imageInput","avatarInput","nameInput","descriptionInput","profileAvatar","profileTitle","profileDescription","popups","evt","settings","formSelector","preventDefault","fieldSet","patternMismatch","dataset","errorMessage","validationMessage","showError","isValid","checkInputValidity","setEventListeners","userInf","openImagePopup","popupImage","popupCaption","renderLoading","text","all","_ref","_ref2","cards","about","avatar","append","renderCards","value","body","JSON","stringify","finally","button","getComputedStyle","backgroundImage","slice","newAvatar","newCard","prepend"],"sourceRoot":""}