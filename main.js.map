{"version":3,"file":"main.js","mappings":"mBAAO,ICADA,EAEa,gBAFbA,EAGoB,iBAHpBA,EAImB,kBAJnBA,EAKe,yBALfA,EAMU,2BAWVC,EAAY,SAACC,EAAaC,GAC5B,IAAMC,EAAeF,EAAYG,cAAc,IAADC,OAAKH,EAAaI,GAAE,WAClEJ,EAAaK,UAAUC,OAAOT,GAC9BI,EAAaM,YAAc,IAC3BN,EAAaI,UAAUC,OAAOT,EAClC,EAyBA,SAASW,EAAmBT,GACxB,IAAMU,EAAYC,MAAMC,KAAKZ,EAAYa,iBAAiBf,IACpDgB,EAAgBd,EAAYG,cAAcL,GAEhDiB,EAAkBL,EAAWI,GAC7BJ,EAAUM,SAAQ,SAACf,GACjBA,EAAagB,iBAAiB,SAAS,YAflB,SAACjB,EAAaC,IAdzB,SAACD,EAAaC,GACtBA,EAAaiB,SAASC,gBACtBlB,EAAamB,kBAAkBnB,EAAaoB,QAAQC,cAEpDrB,EAAamB,kBAAkB,IAEnCG,QAAQC,IAAIvB,EAAawB,mBACpBxB,EAAaiB,SAASQ,MAGvB3B,EAAUC,EAAaC,GAxBb,SAACD,EAAaC,EAAcqB,GAC1C,IAAMpB,EAAeF,EAAYG,cAAc,IAADC,OAAKH,EAAaI,GAAE,WAClEJ,EAAaK,UAAUqB,IAAI7B,GAC3BI,EAAaM,YAAcc,EAC3BpB,EAAaI,UAAUqB,IAAI7B,EAC/B,CAiBQ8B,CAAU5B,EAAaC,EAAcA,EAAawB,kBAI1D,CAGII,CAAQ7B,EAAaC,EAMzB,CASQ6B,CAAmB9B,EAAaC,GAEhCc,EAAkBL,EAAWI,EAC/B,GACF,GACJ,CAEO,IAcDiB,EAAkB,SAACrB,GACrB,OAAOA,EAAUsB,MAAK,SAAC/B,GACrB,OAAQA,EAAaiB,SAASQ,KAChC,GACJ,EAEA,SAASX,EAAkBL,EAAWI,GAC9BiB,EAAgBrB,IACpBI,EAAcR,UAAUqB,IAAI7B,GAC5BgB,EAAcmB,aAAa,WAAY,MAEvCnB,EAAcR,UAAUC,OAAOT,GAC/BgB,EAAcoB,gBAAgB,WAAY,IAE9C,CAEO,IAAMC,EAAkB,SAACnC,GAC5B,IAAMU,EAAYC,MAAMC,KAAKZ,EAAYa,iBAAiBf,IACpDgB,EAAgBd,EAAYG,cAAcL,GAEhDY,EAAUM,SAAQ,SAACf,GACfF,EAAUC,EAAaC,EAC3B,IAEAc,EAAkBL,EAAWI,EACjC,ECpGMsB,EAAS,CACXC,QAAS,4CACTC,QAAS,CACPC,cAAe,uCACf,eAAgB,qBAItB,SAASC,EAAcC,GACnB,OAAIA,EAAIC,GACGD,EAAIE,OAERC,QAAQC,OAAO,WAADzC,OAAYqC,EAAIK,QACzC,CAEO,ICTDC,EAAeC,SAAS7C,cAAc,kBAAkB8C,QAGvD,SAASC,EAAWC,EAAUC,EAAUC,EAAcC,EAAYC,GACvE,IAAMC,EAAcT,EAAa5C,cAAc,SAASsD,WAAU,GAG5DC,EAAYF,EAAYrD,cAAc,gBACtCwD,EAAYH,EAAYrD,cAAc,gBACtCyD,EAAeJ,EAAYrD,cAAc,wBACzC0D,EAAaL,EAAYrD,cAAc,sBACvC2D,EAAgBN,EAAYrD,cAAc,sBAkChD,OAhCAuD,EAAUK,IAAMZ,EAASa,KACzBN,EAAUO,IAAMd,EAASe,KACzBP,EAAUnD,YAAc2C,EAASe,KACjCJ,EAActD,YAAc2C,EAASgB,MAAMC,OAGvCjB,EAASgB,MAAMnC,MAAK,SAAAqC,GAAI,OAAIA,EAAKC,MAAQlB,EAASkB,GAAG,KACvDT,EAAWvD,UAAUqB,IAAI,+BAKvBwB,EAASoB,MAAMD,MAAQlB,EAASkB,KAClCV,EAAaY,MAAMC,QAAU,QAC7Bb,EAAa3C,iBAAiB,SAAS,SAACyD,GACtCrB,EAAaqB,EAAOvB,EAASmB,IAC/B,KAEAV,EAAaY,MAAMC,QAAU,OAI/BZ,EAAW5C,iBAAiB,SAAS,SAACyD,GACpCpB,EAAWoB,EAAOvB,EAASmB,IAAKnB,EAASgB,MAAOX,EAClD,IAGAE,EAAUzC,iBAAiB,SAAS,WAClCsC,EAAaJ,EAASa,KAAMb,EAASe,KACvC,IAGOV,CACT,CAGO,SAASmB,EAAiBD,EAAOE,GACtC,IDCyBvE,ECDnBmD,EAAckB,EAAMG,OAAOC,QAAQ,iBACrCtB,IDAqBnD,ECCZuE,EDAJG,MAAM,GAAD3E,OAAIgC,EAAOC,QAAO,WAAAjC,OAAUC,GAAM,CAC1C2E,OAAQ,SACR1C,QAASF,EAAOE,UAEf2C,KAAKzC,ICHTyC,MAAK,WACJzB,EAAYjD,QACd,IACC2E,OAAM,SAACC,GACN5D,QAAQC,IAAI,UAADpB,OAAW+E,GACxB,GAEJ,CAGO,SAASC,EAAeV,EAAOE,EAAQT,EAAOkB,GAGjD,IAGIC,EDVgBjF,ECODqE,EAAMG,OACEvE,UAAUiF,OAAO,gCDRxBlF,ECYAuE,EAAlBU,EDXKP,MAAM,GAAD3E,OAAIgC,EAAOC,QAAO,iBAAAjC,OAAgBC,GAAM,CAChD2E,OAAQ,MACR1C,QAASF,EAAOE,UAEf2C,KAAKzC,ICSR8C,EDNoB,SAACjF,GACvB,OAAO0E,MAAM,GAAD3E,OAAIgC,EAAOC,QAAO,iBAAAjC,OAAgBC,GAAM,CAChD2E,OAAQ,SACR1C,QAASF,EAAOE,UAEf2C,KAAKzC,EACd,CCAgBgD,CAAWZ,GAGvBU,EACCL,MAAK,SAACQ,GACiBJ,EAAKlF,cAAc,sBAC3BK,YAAciF,EAAgBtB,MAAMC,OAC1CqB,EAAgBtB,KAC1B,IACCe,OAAM,SAAAC,GAAG,OAAI5D,QAAQmE,MAAMP,EAAI,GACpC,CCxFO,SAASQ,EAAUC,GACtBA,EAAMtF,UAAUqB,IAAI,mBACpBqB,SAAS/B,iBAAiB,UAAW4E,EACzC,CAGO,SAASC,EAAWF,GACvBA,EAAMtF,UAAUC,OAAO,mBACvByC,SAAS+C,oBAAoB,UAAWF,EAC5C,CAGA,SAASA,EAAkBnB,GACvB,GAAkB,WAAdA,EAAMsB,IAAkB,CACxB,IAAMC,EAAcjD,SAAS7C,cAAc,oBACvC8F,GACAH,EAAWG,EAEnB,CACJ,C,sGCZA,IAAMC,EAAalD,SAAS7C,cAAc,iBAMpCgG,EAAYnD,SAAS7C,cAAc,oBACnCiG,EAAkBpD,SAAS7C,cAAc,2BACzCkG,EAAerD,SAAS7C,cAAc,wBACtCmG,EAAatD,SAAS7C,cAAc,qBACpCoG,EAAevD,SAASnC,iBAAiB,iBAEzC2F,EAAaxD,SAAS7C,cAAc,gCACpCsG,EAAazD,SAAS7C,cAAc,0BAEpCuG,EAAc1D,SAAS7C,cAAc,iCAErCwG,EAAYR,EAAUhG,cAAc,2BACpCyG,EAAmBT,EAAUhG,cAAc,kCAE3C0G,EAAgB7D,SAAS7C,cAAc,mBACvC2G,EAAe9D,SAAS7C,cAAc,mBACtC4G,EAAqB/D,SAAS7C,cAAc,yBAI5C6G,EAAShE,SAASnC,iBAAiB,UAGzCmG,EAAOhG,SAAQ,SAAA4E,GACXA,EAAMtF,UAAUqB,IAAI,oBACxB,IAGAqF,EAAOhG,SAAQ,SAAC4E,GACZA,EAAM3E,iBAAiB,aAAa,SAACgG,GAC7BA,EAAIpC,OAAOvE,UAAU4G,SAAS,UAC9BpB,EAAWF,EAEnB,GACJ,IJcqBjF,MAAMC,KAAKoC,SAASnC,iBA7DvB,iBA8DLG,SAAQ,SAAChB,GAChBA,EAAYiB,iBAAiB,UAAU,SAACgG,GACtCA,EAAIE,gBACN,IACuBxG,MAAMC,KAAKZ,EAAYa,iBAAiB,eAChDG,SAAQ,SAACoG,GAClB3G,EAAkB2G,EACtB,GAEJ,IIXJ,IAAIC,EAAU,KA+DP,SAASC,EAAetD,EAAME,GACjC,IAAMqD,EAAajB,EAAWnG,cAAc,iBACtCqH,EAAelB,EAAWnG,cAAc,mBAE9CoH,EAAWxD,IAAMC,EACjBuD,EAAWtD,IAAMC,EACjBsD,EAAahH,YAAc0D,EAE3ByB,EAAUW,EACd,CAyFA,SAASmB,EAAcR,EAAKS,GACZT,EAAIpC,OAAO1E,cAAc,kBACjCK,YAAckH,CACpB,CAlKF9E,QAAQ+E,IAAI,CH/CD5C,MAAM,GAAD3E,OAAIgC,EAAOC,QAAO,aAAa,CACvC2C,OAAQ,MACR1C,QAAS,CACLC,cAAeH,EAAOE,QAAQC,iBAGjC0C,KAAKzC,GAIHuC,MAAM,GAAD3E,OAAIgC,EAAOC,QAAO,UAAU,CACpC2C,OAAQ,MACR1C,QAASF,EAAOE,UAEf2C,KAAKzC,KGkCTyC,MAAK,SAAA2C,GAAuB,I,IAAAC,G,EAAA,E,4CAAAD,I,s1BAArBxE,EAAQyE,EAAA,GAAEC,EAAKD,EAAA,GACnBR,EAAUjE,EACV0D,EAAatG,YAAc4C,EAASc,KACpC6C,EAAmBvG,YAAc4C,EAAS2E,MAC1ClB,EAAcrC,MAAQ,0BAAHpE,OAA6BgD,EAAS4E,OAAM,MAQvE,SAAqBF,GACjBA,EAAM9G,SAAQ,SAAAqE,GACV,IAAM7B,EAAcN,EAAWmC,EAAMgC,EAAS1C,EAAkBS,EAAgBkC,GAChFpB,EAAW+B,OAAOzE,EACtB,GACF,CAZM0E,CAAYJ,EAChB,IACC5C,OAAM,SAACC,GACJ5D,QAAQC,IAAI,UAADpB,OAAW+E,GAC1B,IAYJnC,SAAS7C,cAAc,yBAAyBc,iBAAiB,SAAS,WAEtE0F,EAAUwB,MAAQrB,EAAatG,YAC/BoG,EAAiBuB,MAAQpB,EAAmBvG,YAC5C2B,EAAgBgE,GAChBR,EAAUQ,EACd,IAG2BA,EAAUhG,cAAc,gBA2BhCc,iBAAiB,UAxBpC,SAAiCgG,GAK7B,IHrE6B/C,EAAM6D,EGiEnCd,EAAIE,iBACJM,EAAcR,EAAK,iBACnB9E,EAAgBgE,IHnEajC,EGqEbyC,EAAUwB,MHrESJ,EGsEpBnB,EAAiBuB,MHrEzBpD,MAAM,GAAD3E,OAAIgC,EAAOC,QAAO,aAAa,CACvC2C,OAAQ,QACR1C,QAASF,EAAOE,QAChB8F,KAAMC,KAAKC,UAAU,CACjBpE,KAAMA,EACN6D,MAAOA,MAGd9C,KAAKzC,IGiEDyC,MAAK,SAAC7B,GACH0D,EAAatG,YAAc4C,EAASc,KACpC6C,EAAmBvG,YAAc4C,EAAS2E,MAC1CjC,EAAWK,EACf,IACCjB,OAAM,SAACC,GACJ5D,QAAQC,IAAI,oDAADpB,OAAqD+E,EAAIrC,QACxE,IACCyF,SAAQ,WACLd,EAAcR,EAAK,YACvB,GACR,IAkBAV,EAAavF,SAAQ,SAAAwH,GACjBA,EAAOvH,iBAAiB,SAAS,WAE7B6E,EADc0C,EAAO1D,QAAQ,UAEjC,GACJ,IAGA+B,EAAc5F,iBAAiB,SAAS,WACpCyF,EAAYyB,MAAQM,iBAAiB5B,GAAe6B,gBAAgBC,MAAM,GAAI,GAC9EhD,EAAUS,GACVjE,EAAgBiE,EAEpB,IAGyBA,EAAgBjG,cAAc,gBAyBtCc,iBAAiB,UAtBlC,SAAmCgG,GAC/BA,EAAIE,iBACJM,EAAcR,EAAK,iBACnB9E,EAAgBiE,GAEhB,IH/EwBpC,EG+ElB4E,EAAYlC,EAAYyB,MAC9B5G,QAAQC,IAAI,gBAAiBoH,IHhFL5E,EGmFZ4E,EHlFL7D,MAAM,GAAD3E,OAAIgC,EAAOC,QAAO,oBAAoB,CAC9C2C,OAAQ,QACR1C,QAASF,EAAOE,QAChB8F,KAAMC,KAAKC,UAAU,CAClBN,OAAQhE,MAGViB,KAAKzC,IG4ETyC,MAAK,SAAC7B,GACH0C,EAAWM,GACXS,EAAcrC,MAAQ,0BAAHpE,OAA6BgD,EAAS4E,OAAM,KACnE,IACC9C,OAAM,SAACC,GACJ5D,QAAQC,IAAI,+CAADpB,OAAgD+E,EAAIrC,QACnE,IACCyF,SAAQ,WACLd,EAAcR,EAAK,YACvB,GACJ,IAKAjE,SAAS7C,cAAc,wBAAwBc,iBAAiB,SAAS,WACrEkB,EAAgBkE,GAChBV,EAAUU,GAEVG,EAAW2B,MAAQ,GACnB1B,EAAW0B,MAAQ,EACvB,IAG2B9B,EAAalG,cAAc,gBA8BnCc,iBAAiB,UA3BpC,SAAiCgG,GAC7BA,EAAIE,iBACJM,EAAcR,EAAK,eACnB9E,EAAgBkE,GAEhB,IHxJqBnC,EAAMF,EGwJrBb,EAAW,CACbe,KAAMsC,EAAW2B,MACjBnE,KAAMyC,EAAW0B,QH1JAjE,EG6JZf,EAASe,KH7JSF,EG6JHb,EAASa,KH5J1Be,MAAM,GAAD3E,OAAIgC,EAAOC,QAAO,UAAU,CACpC2C,OAAQ,OACR1C,QAASF,EAAOE,QAChB8F,KAAMC,KAAKC,UAAU,CACjBpE,KAAMA,EACNF,KAAMA,MAGbiB,KAAKzC,IGqJDyC,MAAK,SAAC4D,GACH/C,EAAWO,GAEX,IAAM7C,EAAcN,EAAW2F,EAASxB,EAAS1C,EAAkBS,EAAgBkC,GACnFpB,EAAW4C,QAAQtF,GACnBjC,QAAQC,IAAIqH,EAAQ7E,KACxB,IACCkB,OAAM,SAACC,GACJ5D,QAAQC,IAAI,yCAADpB,OAA0C+E,EAAIrC,QAC7D,IACCyF,SAAQ,WACLd,EAAcR,EAAK,UACvB,GACR,G","sources":["webpack://mesto-project-ff/./src/components/cards.js","webpack://mesto-project-ff/./src/components/validate.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/index.js"],"sourcesContent":["export const initialCards = [\r\n    {\r\n      name: \"Архыз\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\r\n    },\r\n    {\r\n      name: \"Челябинская область\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\r\n    },\r\n    {\r\n      name: \"Иваново\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\r\n    },\r\n    {\r\n      name: \"Камчатка\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\r\n    },\r\n    {\r\n      name: \"Холмогорский район\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\r\n    },\r\n    {\r\n      name: \"Байкал\",\r\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\r\n    }\r\n];\r\n","const cfg = {\r\n    formSelector: '.popup__form',\r\n    inputSelector: '.popup__input',\r\n    submitButtonSelector: '.popup__button',\r\n    inactiveButtonClass: 'button_inactive',\r\n    inputErrorClass: 'form__input_type_error',\r\n    errorClass: 'form__input-error_active'\r\n};\r\n\r\n\r\nconst showError = (formElement, inputElement, errorMessage) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n    inputElement.classList.add(cfg.inputErrorClass);\r\n    errorElement.textContent = errorMessage;\r\n    errorElement.classList.add(cfg.errorClass);\r\n}\r\n\r\nconst hideError = (formElement, inputElement) => {\r\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n    inputElement.classList.remove(cfg.inputErrorClass);\r\n    errorElement.textContent = \" \";\r\n    errorElement.classList.remove(cfg.errorClass);\r\n}\r\n\r\nconst isValid = (formElement, inputElement) => {\r\n    if (inputElement.validity.patternMismatch) {\r\n        inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n    } else {\r\n        inputElement.setCustomValidity(\"\");\r\n    }\r\n    console.log(inputElement.validationMessage);\r\n    if (!inputElement.validity.valid) {\r\n        showError(formElement, inputElement, inputElement.validationMessage);\r\n    } else {\r\n        hideError(formElement, inputElement);\r\n    }\r\n}\r\n\r\nconst checkInputValidity = (formElement, inputElement) => {\r\n    isValid(formElement, inputElement);\r\n    /*if (!inputElement.validity.valid) {\r\n        showError(formElement, inputElement, inputElement.validationMessage);\r\n    } else {\r\n        hideError(formElement, inputElement);\r\n    }*/\r\n}\r\n\r\nfunction setEventListeners (formElement) {\r\n    const inputList = Array.from(formElement.querySelectorAll(cfg.inputSelector));\r\n    const buttonElement = formElement.querySelector(cfg.submitButtonSelector);\r\n    // чтобы проверить состояние кнопки в самом начале\r\n    toggleButtonState(inputList, buttonElement);\r\n    inputList.forEach((inputElement) => {\r\n      inputElement.addEventListener('input', function () {\r\n        checkInputValidity(formElement, inputElement);\r\n        // чтобы проверять его при изменении любого из полей\r\n        toggleButtonState(inputList, buttonElement);\r\n      });\r\n    });\r\n}\r\n\r\nexport const enableValidation = () => {\r\n    const formList = Array.from(document.querySelectorAll(cfg.formSelector));\r\n    formList.forEach((formElement) => {\r\n      formElement.addEventListener('submit', (evt) => {\r\n        evt.preventDefault();\r\n      });\r\n        const fieldsetList = Array.from(formElement.querySelectorAll('.form__set'));\r\n        fieldsetList.forEach((fieldSet) => {\r\n            setEventListeners(fieldSet);\r\n        });\r\n      //setEventListeners(formElement);\r\n    });\r\n}\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n    return inputList.some((inputElement) => {\r\n      return !inputElement.validity.valid;\r\n    })\r\n}\r\n\r\nfunction toggleButtonState(inputList, buttonElement) {\r\n    if (hasInvalidInput(inputList)) {\r\n    buttonElement.classList.add(cfg.inactiveButtonClass);\r\n    buttonElement.setAttribute('disabled', '');\r\n  } else {\r\n    buttonElement.classList.remove(cfg.inactiveButtonClass);\r\n    buttonElement.removeAttribute('disabled', '');\r\n  } \r\n}\r\n\r\nexport const clearValidation = (formElement) => {\r\n    const inputList = Array.from(formElement.querySelectorAll(cfg.inputSelector));\r\n    const buttonElement = formElement.querySelector(cfg.submitButtonSelector);\r\n    \r\n    inputList.forEach((inputElement) => {\r\n        hideError(formElement, inputElement);\r\n    });\r\n\r\n    toggleButtonState(inputList, buttonElement);\r\n}","const config = {\r\n    baseUrl: 'https://nomoreparties.co/v1/wff-cohort-29',\r\n    headers: {\r\n      authorization: 'f9e240a7-ecbe-4c3b-ad2a-e207beb70d7e',\r\n      'Content-Type': 'application/json'\r\n    }\r\n  }\r\n\r\nfunction checkResponse(res) {\r\n    if (res.ok) {\r\n        return res.json();\r\n    }\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n}\r\n\r\nexport const getProfileInfo  = () => {\r\n    return fetch(`${config.baseUrl}/users/me`, {\r\n        method: \"GET\",\r\n        headers: {\r\n            authorization: config.headers.authorization,\r\n        },\r\n    })\r\n        .then(checkResponse);\r\n};\r\n\r\nexport const getInitialCards = () => {\r\n    return fetch(`${config.baseUrl}/cards`, {\r\n        method: \"GET\",\r\n        headers: config.headers\r\n    })\r\n        .then(checkResponse)\r\n}\r\n\r\nexport const patchProfileInfo = (name, about) => {\r\n    return fetch(`${config.baseUrl}/users/me`, {\r\n        method: \"PATCH\",\r\n        headers: config.headers,\r\n        body: JSON.stringify({\r\n            name: name,\r\n            about: about\r\n        })\r\n    })\r\n    .then(checkResponse);\r\n}\r\n\r\nexport const postCard = (name, link) => {\r\n    return fetch(`${config.baseUrl}/cards`, {\r\n        method: \"POST\",\r\n        headers: config.headers,\r\n        body: JSON.stringify({\r\n            name: name,\r\n            link: link\r\n        })\r\n    })\r\n    .then(checkResponse);\r\n}\r\n\r\nexport const deleteCard = (id) => {\r\n    return fetch(`${config.baseUrl}/cards/${id}`, {\r\n        method: 'DELETE',\r\n        headers: config.headers\r\n    })\r\n        .then(checkResponse)\r\n}\r\n\r\nexport const putLike = (id) => {\r\n    return fetch(`${config.baseUrl}/cards/likes/${id}`, {\r\n        method: 'PUT',\r\n        headers: config.headers\r\n    })\r\n        .then(checkResponse)\r\n}\r\n\r\nexport const deleteLike = (id) => {\r\n    return fetch(`${config.baseUrl}/cards/likes/${id}`, {\r\n        method: 'DELETE',\r\n        headers: config.headers\r\n    })\r\n        .then(checkResponse)\r\n}\r\n\r\nexport const patchAvatar = (link) => {\r\n    return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n        method: \"PATCH\",\r\n        headers: config.headers,\r\n        body: JSON.stringify({\r\n           avatar: link\r\n        })\r\n    })\r\n        .then(checkResponse)\r\n}\r\n","import { deleteCard, putLike, deleteLike } from './api.js';\r\n\r\nconst likeCount = (cardLikeCount, likes) => {\r\n  cardLikeCount.textContent = likes.length\r\n}\r\n\r\nconst cardTemplate = document.querySelector('#card-template').content; \r\n\r\n// Функция для создания карточки \r\nexport function createCard(cardData, userInfo, onCardDelete, onCardLike, onLargeImage) { \r\n  const cardElement = cardTemplate.querySelector('.card').cloneNode(true);                                           // Клонируем шаблон карточки \r\n\r\n  // Устанавливаем значения имени и ссылки на изображение \r\n  const cardImage = cardElement.querySelector('.card__image'); \r\n  const cardTitle = cardElement.querySelector('.card__title'); \r\n  const deleteButton = cardElement.querySelector('.card__delete-button');\r\n  const likeButton = cardElement.querySelector('.card__like-button');\r\n  const cardLikeCount = cardElement.querySelector('.button-like-count');\r\n\r\n  cardImage.src = cardData.link;                                                       // Устанавливаем источник изображения \r\n  cardImage.alt = cardData.name;                                                      // Устанавливаем альт-текст \r\n  cardTitle.textContent = cardData.name;                                             // Устанавливаем название \r\n  cardLikeCount.textContent = cardData.likes.length; // likeCount(cardLikeCount, cardData.likes);\r\n\r\n  // Устанавливаем состояние кнопки лайка\r\n  if (cardData.likes.some(like => like._id === userInfo._id)) {\r\n    likeButton.classList.add('card__like-button_is-active'); // Если пользователь уже лайкнул, добавляем класс\r\n  }\r\n\r\n  // Добавляем обработчик клика для удаления карточки \r\n  //deleteButton.addEventListener('click', handleCardDelete);\r\n  if (cardData.owner._id === userInfo._id) {\r\n    deleteButton.style.display = 'block';\r\n    deleteButton.addEventListener('click', (event) => { \r\n      onCardDelete(event, cardData._id);\r\n    });\r\n  } else {\r\n    deleteButton.style.display = 'none';\r\n  }                    \r\n  \r\n  // Добавляем обработчик клика для лайка\r\n  likeButton.addEventListener('click', (event) => { \r\n    onCardLike(event, cardData._id, cardData.likes, cardElement);\r\n  });\r\n  \r\n  // Добавляем обработчик клика по изображению\r\n  cardImage.addEventListener('click', () => {\r\n    onLargeImage(cardData.link, cardData.name); // Открываем попап с изображением\r\n  });\r\n  \r\n\r\n  return cardElement; // Возвращаем готовый элемент карточки \r\n}\r\n\r\n// Функция для удаления карточки \r\nexport function handleCardDelete(event, cardId) { \r\n  const cardElement = event.target.closest('.places__item');              // Находим ближайший элемент карточки \r\n  if (cardElement) {\r\n    deleteCard(cardId)\r\n    .then(() => {\r\n      cardElement.remove();\r\n    })\r\n    .catch((err) => {\r\n      console.log(`Ошибка ${err}`);\r\n    });     \r\n  } \r\n}\r\n\r\n// Функция для лайка карточки \r\nexport function handleCardLike(event, cardId, likes, card) {\r\n  // const likeButton = event.target; // Получаем элемент, на который нажали\r\n  // likeButton.classList.toggle('card__like-button_is-active'); // Переключаем класс активности\r\n    const likeButton = event.target; \r\n    const isLiked = likeButton.classList.toggle('card__like-button_is-active'); \r\n  \r\n    let request; \r\n    if (isLiked) {\r\n      request = putLike(cardId);\r\n    } else {\r\n      request = deleteLike(cardId);\r\n    }\r\n  \r\n    request\r\n    .then((updatedCardData) => {\r\n      const cardLikeCount = card.querySelector('.button-like-count');\r\n      cardLikeCount.textContent = updatedCardData.likes.length;\r\n      likes = updatedCardData.likes; \r\n    })\r\n    .catch(err => console.error(err));\r\n}\r\n\r\n ","// Функция для открытия модального окна \r\nexport function openPopup(popup) {\r\n    popup.classList.add('popup_is-opened');\r\n    document.addEventListener('keydown', handleEscapeClose);\r\n}\r\n \r\n// Функция для закрытия модального окна \r\nexport function closePopup(popup) {\r\n    popup.classList.remove('popup_is-opened');\r\n    document.removeEventListener('keydown', handleEscapeClose);  \r\n}\r\n\r\n// Обработчик события клавиши Esc \r\nfunction handleEscapeClose(event) { \r\n    if (event.key === 'Escape') { \r\n        const openedPopup = document.querySelector('.popup_is-opened'); \r\n        if (openedPopup) { \r\n            closePopup(openedPopup); \r\n        } \r\n    } \r\n}","import '../pages/index.css';\r\nimport { initialCards } from './cards.js';\r\nimport { enableValidation, clearValidation } from './validate.js';\r\nimport { createCard, handleCardDelete, handleCardLike } from './card.js';\r\nimport { openPopup, closePopup } from './modal.js';\r\nimport { getProfileInfo, getInitialCards, patchProfileInfo, postCard, patchAvatar } from './api.js';\r\n\r\n// Копируем шаблон карточки \r\nconst placesList = document.querySelector('.places__list'); \r\n \r\n// Вызываем функцию для рендеринга карточек \r\n//renderCards(initialCards); \r\n \r\n// Переменные для модальных окон \r\nconst editPopup = document.querySelector('.popup_type_edit');\r\nconst editAvatarPopup = document.querySelector('.popup_type_edit-avatar');\r\nconst newCardPopup = document.querySelector('.popup_type_new-card'); \r\nconst imagePopup = document.querySelector('.popup_type_image'); \r\nconst closeButtons = document.querySelectorAll('.popup__close');  \r\n\r\nconst titleInput = document.querySelector('.popup__input_type_card-name');\r\nconst imageInput = document.querySelector('.popup__input_type_url'); // =avatarInput\r\n\r\nconst avatarInput = document.querySelector('.popup__input_type_url-avatar');\r\n\r\nconst nameInput = editPopup.querySelector('.popup__input_type_name');\r\nconst descriptionInput = editPopup.querySelector('.popup__input_type_description');\r\n// Получаем значения из профиля\r\nconst profileAvatar = document.querySelector('.profile__image');\r\nconst profileTitle = document.querySelector('.profile__title');  \r\nconst profileDescription = document.querySelector('.profile__description');\r\n\r\n\r\n// Получаем все попапы \r\nconst popups = document.querySelectorAll('.popup'); \r\n\r\n// Добавляем класс 'popup_is-animated' ко всем попапам \r\npopups.forEach(popup => {\r\n    popup.classList.add('popup_is-animated');\r\n});\r\n\r\n// Добавляем обработчик клика по оверлею\r\npopups.forEach((popup) => {\r\n    popup.addEventListener(\"mousedown\", (evt) => {\r\n        if (evt.target.classList.contains(\"popup\")) {\r\n            closePopup(popup);\r\n        }\r\n    });\r\n}); \r\n\r\nconst settings = {\r\n    formSelector: '.popup__form',\r\n    inputSelector: '.popup__input',\r\n    submitButtonSelector: '.popup__button',\r\n    inactiveButtonClass: 'button_inactive',\r\n    inputErrorClass: 'form__input_type_error',   // мой класс\r\n    errorClass: 'form__input-error_active'      // тоже мой класс \r\n};\r\n  \r\nenableValidation(settings);                   // включаю валидацию\r\n\r\nlet userInf = null;\r\n\r\nPromise.all([getProfileInfo(), getInitialCards()])\r\n    .then(([userInfo, cards]) => {\r\n        userInf = userInfo;\r\n        profileTitle.textContent = userInfo.name;\r\n        profileDescription.textContent = userInfo.about;\r\n        profileAvatar.style = `background-image: url('${userInfo.avatar}')`;\r\n        renderCards(cards, userInfo);\r\n    })\r\n    .catch((err) => {\r\n        console.log(`Ошибка ${err}`);\r\n    })\r\n\r\n// Функция для отображения всех карточек \r\nfunction renderCards(cards, userInfo) {                                                                        // Передаю в функцию массив, который надо вывести \r\n    cards.forEach(card => { \r\n        const cardElement = createCard(card, userInf, handleCardDelete, handleCardLike, openImagePopup);    // Создаем карточку \r\n        placesList.append(cardElement);                                                           // Добавляем карточку в список \r\n    }); \r\n  }\r\n\r\n\r\n// Открытие модального окна редактирования профиля  \r\ndocument.querySelector('.profile__edit-button').addEventListener('click', () => { \r\n    // Заполняем поля ввода значениями из профиля\r\n    nameInput.value = profileTitle.textContent;  \r\n    descriptionInput.value = profileDescription.textContent;  \r\n    clearValidation(editPopup);       // очищаем ошибки валидации формы и делаем кнопку неактивной \r\n    openPopup(editPopup);  \r\n});\r\n\r\n// Находим форму в DOM\r\nconst profileFormElement = editPopup.querySelector('.popup__form');  \r\n\r\n// Обработчик «отправки» формы\r\nfunction handleProfileFormSubmit(evt) {  \r\n    evt.preventDefault(); // Отменяем стандартную отправку формы.\r\n    renderLoading(evt, 'Сохранение...');\r\n    clearValidation(editPopup);\r\n    // Получаем значение полей jobInput и nameInput из свойства value\r\n    const newName = nameInput.value;  \r\n    const newJob = descriptionInput.value;\r\n\r\n    // Обновляем информацию о профиле через API\r\n    patchProfileInfo(newName, newJob)\r\n        .then((userInfo) => {\r\n            profileTitle.textContent = userInfo.name;   \r\n            profileDescription.textContent = userInfo.about;   \r\n            closePopup(editPopup); \r\n        })\r\n        .catch((err) => {\r\n            console.log(`Ошибка при обновлении информации о пользователе: ${err.status}`); \r\n        })\r\n        .finally(() => {\r\n            renderLoading(evt, 'Сохранить');\r\n        });\r\n}\r\n\r\n// Прикрепляем обработчик к форме\r\nprofileFormElement.addEventListener('submit', handleProfileFormSubmit);\r\n\r\n// Функция для открытия попапа с изображением \r\nexport function openImagePopup(link, name) {  \r\n    const popupImage = imagePopup.querySelector('.popup__image');  \r\n    const popupCaption = imagePopup.querySelector('.popup__caption');  \r\n \r\n    popupImage.src = link;  \r\n    popupImage.alt = name;  \r\n    popupCaption.textContent = name;  \r\n \r\n    openPopup(imagePopup);  \r\n}\r\n\r\n// Закрытие модальных окон \r\ncloseButtons.forEach(button => { \r\n    button.addEventListener('click', () => { \r\n        const popup = button.closest('.popup'); \r\n        closePopup(popup); \r\n    }); \r\n});\r\n\r\n// Открытие модального окна редактирования аватара профиля\r\nprofileAvatar.addEventListener('click', () => {\r\n    avatarInput.value = getComputedStyle(profileAvatar).backgroundImage.slice(5, -2);\r\n    openPopup(editAvatarPopup);\r\n    clearValidation(editAvatarPopup);\r\n    \r\n});\r\n\r\n// Находим форму добавления аватара в DOM\r\nconst newAvatarElement = editAvatarPopup.querySelector('.popup__form');\r\n\r\n// Обработчик «отправки» формы добавления аватара\r\nfunction handleNewAvatarFormSubmit(evt) {\r\n    evt.preventDefault();\r\n    renderLoading(evt, 'Сохранение...');\r\n    clearValidation(editAvatarPopup);\r\n\r\n    const newAvatar = avatarInput.value;\r\n    console.log('Новый аватар:', newAvatar);\r\n\r\n    // Обновляем информацию об аватаре через API\r\n    patchAvatar(newAvatar)\r\n    .then((userInfo) => {\r\n        closePopup(editAvatarPopup);\r\n        profileAvatar.style = `background-image: url('${userInfo.avatar}')`;\r\n    })\r\n    .catch((err) => {\r\n        console.log(`Ошибка при обновлении аватара пользователя: ${err.status}`); \r\n    })\r\n    .finally(() => {\r\n        renderLoading(evt, 'Сохранить');\r\n    });\r\n}\r\n// Прикрепляем обработчик к форме\r\nnewAvatarElement.addEventListener('submit',  handleNewAvatarFormSubmit);\r\n\r\n// Открытие модального окна добавления новой карточки \r\ndocument.querySelector('.profile__add-button').addEventListener('click', () => {   \r\n    clearValidation(newCardPopup);\r\n    openPopup(newCardPopup);   \r\n    // Обнуляем поля формы\r\n    titleInput.value = '';\r\n    imageInput.value = '';\r\n});  \r\n\r\n// Находим форму добавления карточки в DOM \r\nconst newCardFormElement = newCardPopup.querySelector('.popup__form'); \r\n\r\n// Обработчик «отправки» формы добавления карточки \r\nfunction handleNewCardFormSubmit(evt) {   \r\n    evt.preventDefault(); // Отменяем стандартную отправку формы. \r\n    renderLoading(evt, 'Создание...');\r\n    clearValidation(newCardPopup);\r\n\r\n    const cardData = {\r\n        name: titleInput.value,\r\n        link: imageInput.value\r\n    };\r\n\r\n    postCard(cardData.name, cardData.link)\r\n        .then((newCard) => {\r\n            closePopup(newCardPopup);\r\n            //renderCards([newCard], userInfo);\r\n            const cardElement = createCard(newCard, userInf, handleCardDelete, handleCardLike, openImagePopup);\r\n            placesList.prepend(cardElement);\r\n            console.log(newCard.link);\r\n        })\r\n        .catch((err) => {\r\n            console.log(`Ошибка при добавлении новой карточки: ${err.status}`); \r\n        })\r\n        .finally(() => {\r\n            renderLoading(evt, 'Создать');\r\n        });\r\n}\r\n\r\n// Прикрепляем обработчик к форме добавления карточки\r\nnewCardFormElement.addEventListener('submit', handleNewCardFormSubmit);\r\n\r\n// Отрисовка состояния загрузки\r\nfunction renderLoading(evt, text) {\r\n    const btn = evt.target.querySelector('.popup__button');\r\n    btn.textContent = text;\r\n  }"],"names":["cfg","hideError","formElement","inputElement","errorElement","querySelector","concat","id","classList","remove","textContent","setEventListeners","inputList","Array","from","querySelectorAll","buttonElement","toggleButtonState","forEach","addEventListener","validity","patternMismatch","setCustomValidity","dataset","errorMessage","console","log","validationMessage","valid","add","showError","isValid","checkInputValidity","hasInvalidInput","some","setAttribute","removeAttribute","clearValidation","config","baseUrl","headers","authorization","checkResponse","res","ok","json","Promise","reject","status","cardTemplate","document","content","createCard","cardData","userInfo","onCardDelete","onCardLike","onLargeImage","cardElement","cloneNode","cardImage","cardTitle","deleteButton","likeButton","cardLikeCount","src","link","alt","name","likes","length","like","_id","owner","style","display","event","handleCardDelete","cardId","target","closest","fetch","method","then","catch","err","handleCardLike","card","request","toggle","deleteLike","updatedCardData","error","openPopup","popup","handleEscapeClose","closePopup","removeEventListener","key","openedPopup","placesList","editPopup","editAvatarPopup","newCardPopup","imagePopup","closeButtons","titleInput","imageInput","avatarInput","nameInput","descriptionInput","profileAvatar","profileTitle","profileDescription","popups","evt","contains","preventDefault","fieldSet","userInf","openImagePopup","popupImage","popupCaption","renderLoading","text","all","_ref","_ref2","cards","about","avatar","append","renderCards","value","body","JSON","stringify","finally","button","getComputedStyle","backgroundImage","slice","newAvatar","newCard","prepend"],"sourceRoot":""}